
C:/Users/jiqiu2021/Desktop/coded/start/start/build/source/loader/loader.elf:     file format elf32-i386
C:/Users/jiqiu2021/Desktop/coded/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000665 memsz 0x00000665 flags r-x
    LOAD off    0x00001668 vaddr 0x00009668 paddr 0x00009668 align 2**12
         filesz 0x00000018 memsz 0x0000006c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062c  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000039  0000862c  0000862c  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009668  00009668  00001668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  00001680  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001698  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000341  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000368  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002d22  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000862c l    d  .rodata	00000000 .rodata
00009668 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
0000801f l     F .text	0000002a inb
00008049 l     F .text	0000002d outb
00008076 l     F .text	0000000b cli
00008081 l     F .text	0000001a read_cr0
0000809b l     F .text	0000002b far_jump
000080c6 l     F .text	00000036 lgdt
000080fc l     F .text	00000012 write_cr0
0000810e l     F .text	00000092 enter_protect_mode
000081a0 l     F .text	0000003b show_msg
000081db l     F .text	00000139 detect_memory
00000000 l    df *ABS*	00000000 loader_32.c
00008337 l     F .text	0000001d inb
00008354 l     F .text	0000001f inw
00008373 l     F .text	0000001f outb
00008392 l     F .text	0000011a reload_elf_file
000084ac l     F .text	00000005 die
000084b1 l     F .text	0000012f read_disk
00008314 g     F .text	00000023 loader_entry
00009668 g     O .data	00000018 gdt_table
000085e0 g     F .text	0000004c load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009680 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009680 g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text
 	.extern loader_entry
	.global _start
_start:

	jmp loader_entry
    8000:	e9 11 03             	jmp    8314 <loader_entry>

00008003 <protect_mode_entry>:
	.code32
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16,%ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax,%ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
    mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
    mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
    mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

	push %ebp
    8011:	55                   	push   %bp
	mov %esp,%ebp
    8012:	89 e5                	mov    %sp,%bp
	mov 0x8(%ebp),%eax
    8014:	8b 45 08             	mov    0x8(%di),%ax
	push %eax
    8017:	50                   	push   %ax

    8018:	ea e0 85 00 00       	ljmp   $0x0,$0x85e0
    801d:	08 00                	or     %al,(%bx,%si)

0000801f <inb>:
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb(uint16_t port)
{
    801f:	66 55                	push   %ebp
    8021:	66 89 e5             	mov    %esp,%ebp
    8024:	66 83 ec 14          	sub    $0x14,%esp
    8028:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    802d:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    __asm__ __volatile__ ("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    8031:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8037:	66 89 c2             	mov    %eax,%edx
    803a:	ec                   	in     (%dx),%al
    803b:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    803f:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax

}
    8045:	66 c9                	leavel 
    8047:	66 c3                	retl   

00008049 <outb>:
    __asm__ __volatile__ ("in %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    return rv;

}
static inline void outb(uint16_t port,uint8_t data)
{
    8049:	66 55                	push   %ebp
    804b:	66 89 e5             	mov    %esp,%ebp
    804e:	66 83 ec 08          	sub    $0x8,%esp
    8052:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8057:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    805c:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8060:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__ ("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    8064:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    806a:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8070:	ee                   	out    %al,(%dx)

}
    8071:	90                   	nop
    8072:	66 c9                	leavel 
    8074:	66 c3                	retl   

00008076 <cli>:


static inline void cli(){
    8076:	66 55                	push   %ebp
    8078:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    807b:	fa                   	cli    
}
    807c:	90                   	nop
    807d:	66 5d                	pop    %ebp
    807f:	66 c3                	retl   

00008081 <read_cr0>:
static inline void sti(){
    __asm__ __volatile__ ("sti");

}
static inline uint32_t read_cr0(){
    8081:	66 55                	push   %ebp
    8083:	66 89 e5             	mov    %esp,%ebp
    8086:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0,%[v]":[v]"=r"(cr0));
    808a:	0f 20 c0             	mov    %cr0,%eax
    808d:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    8092:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    8097:	66 c9                	leavel 
    8099:	66 c3                	retl   

0000809b <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
    809b:	66 55                	push   %ebp
    809d:	66 89 e5             	mov    %esp,%ebp
    80a0:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[]={
    80a4:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a9:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ae:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80b3:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
        offset,selector
    };
    __asm__ __volatile__ ("ljmpl *(%[a])"::[a]"r"(addr));
    80b8:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80bd:	67 66 ff 28          	ljmpl  *(%eax)

}
    80c1:	90                   	nop
    80c2:	66 c9                	leavel 
    80c4:	66 c3                	retl   

000080c6 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
    80c6:	66 55                	push   %ebp
    80c8:	66 89 e5             	mov    %esp,%ebp
    80cb:	66 83 ec 10          	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	66 c1 e8 10          	shr    $0x10,%eax
    80d8:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
    80dc:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80e1:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	66 83 e8 01          	sub    $0x1,%eax
    80ee:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80f2:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80f7:	90                   	nop
    80f8:	66 c9                	leavel 
    80fa:	66 c3                	retl   

000080fc <write_cr0>:
static inline void write_cr0(uint32_t v) {
    80fc:	66 55                	push   %ebp
    80fe:	66 89 e5             	mov    %esp,%ebp
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    8101:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8106:	0f 22 c0             	mov    %eax,%cr0
}
    8109:	90                   	nop
    810a:	66 5d                	pop    %ebp
    810c:	66 c3                	retl   

0000810e <enter_protect_mode>:
    {0, 0, 0, 0},
    {0xFFFF, 0x0000, 0x9A00, 0x00CF},
    {0xFFFF, 0x0000, 0x9200, 0x00CF},
};

static void enter_protect_mode(){
    810e:	66 55                	push   %ebp
    8110:	66 89 e5             	mov    %esp,%ebp
    8113:	66 83 ec 10          	sub    $0x10,%esp
	cli();
    8117:	66 e8 59 ff ff ff    	calll  8076 <cli>
	// 打开A20地址线
	uint8_t v =inb(0x92);
    811d:	66 68 92 00 00 00    	pushl  $0x92
    8123:	66 e8 f6 fe ff ff    	calll  801f <inb>
    8129:	66 83 c4 04          	add    $0x4,%esp
    812d:	67 88 45 ff          	mov    %al,-0x1(%ebp)
	outb(0x92,v|0x2);
    8131:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8137:	66 83 c8 02          	or     $0x2,%eax
    813b:	66 0f b6 c0          	movzbl %al,%eax
    813f:	66 50                	push   %eax
    8141:	66 68 92 00 00 00    	pushl  $0x92
    8147:	66 e8 fc fe ff ff    	calll  8049 <outb>
    814d:	66 83 c4 08          	add    $0x8,%esp
	

	lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    8151:	66 b8 68 96 00 00    	mov    $0x9668,%eax
    8157:	66 6a 18             	pushl  $0x18
    815a:	66 50                	push   %eax
    815c:	66 e8 64 ff ff ff    	calll  80c6 <lgdt>
    8162:	66 83 c4 08          	add    $0x8,%esp
	
	uint32_t cr0 =read_cr0();
    8166:	66 e8 15 ff ff ff    	calll  8081 <read_cr0>
    816c:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
	write_cr0(cr0|(1<<0));
    8171:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    8176:	66 83 c8 01          	or     $0x1,%eax
    817a:	66 50                	push   %eax
    817c:	66 e8 7a ff ff ff    	calll  80fc <write_cr0>
    8182:	66 83 c4 04          	add    $0x4,%esp

	far_jump(8,(uint32_t)protect_mode_entry);
    8186:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    818c:	66 50                	push   %eax
    818e:	66 6a 08             	pushl  $0x8
    8191:	66 e8 04 ff ff ff    	calll  809b <far_jump>
    8197:	66 83 c4 08          	add    $0x8,%esp

}
    819b:	90                   	nop
    819c:	66 c9                	leavel 
    819e:	66 c3                	retl   

000081a0 <show_msg>:
/**
 * BIOS下显示字符串
 */
static void show_msg (const char * msg) {
    81a0:	66 55                	push   %ebp
    81a2:	66 89 e5             	mov    %esp,%ebp
    81a5:	66 83 ec 10          	sub    $0x10,%esp
    char c;

	// 使用bios写显存，持续往下写
	while ((c = *msg++) != '\0') {
    81a9:	eb 0c                	jmp    81b7 <show_msg+0x17>
		__asm__ __volatile__(
    81ab:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    81b1:	b4 0e                	mov    $0xe,%ah
    81b3:	88 c0                	mov    %al,%al
    81b5:	cd 10                	int    $0x10
	while ((c = *msg++) != '\0') {
    81b7:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    81bc:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    81c1:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    81c6:	67 66 0f b6 00       	movzbl (%eax),%eax
    81cb:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    81cf:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    81d4:	75 d5                	jne    81ab <show_msg+0xb>
				"mov $0xe, %%ah\n\t"
				"mov %[ch], %%al\n\t"
				"int $0x10"::[ch]"r"(c));
	}
}
    81d6:	90                   	nop
    81d7:	66 c9                	leavel 
    81d9:	66 c3                	retl   

000081db <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7
static void  detect_memory(void) {
    81db:	66 55                	push   %ebp
    81dd:	66 89 e5             	mov    %esp,%ebp
    81e0:	66 57                	push   %edi
    81e2:	66 56                	push   %esi
    81e4:	66 53                	push   %ebx
    81e6:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    81ea:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    81f1:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    81f3:	66 68 2c 86 00 00    	pushl  $0x862c
    81f9:	66 e8 a1 ff ff ff    	calll  81a0 <show_msg>
    81ff:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    8203:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    820a:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    820c:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8213:	00 00 
    8215:	e9 d0 00             	jmp    82e8 <detect_memory+0x10d>
		SMAP_entry_t * entry = &smap_entry;
    8218:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    821d:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    8222:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8228:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    822d:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8233:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    8239:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    823e:	66 89 f7             	mov    %esi,%edi
    8241:	cd 15                	int    $0x15
    8243:	66 89 da             	mov    %ebx,%edx
    8246:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    824b:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    8250:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    8255:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    825c:	4d 53 
    825e:	74 13                	je     8273 <detect_memory+0x98>
            show_msg("failed.\r\n");
    8260:	66 68 42 86 00 00    	pushl  $0x8642
    8266:	66 e8 34 ff ff ff    	calll  81a0 <show_msg>
    826c:	66 83 c4 04          	add    $0x4,%esp
			return;
    8270:	e9 92 00             	jmp    8305 <detect_memory+0x12a>
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    8273:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    8279:	7e 13                	jle    828e <detect_memory+0xb3>
    827b:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8280:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8285:	66 83 e0 01          	and    $0x1,%eax
    8289:	66 85 c0             	test   %eax,%eax
    828c:	74 53                	je     82e1 <detect_memory+0x106>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    828e:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8293:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8298:	66 83 f8 01          	cmp    $0x1,%eax
    829c:	75 39                	jne    82d7 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    829e:	66 a1 d0 96          	mov    0x96d0,%eax
    82a2:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    82a7:	67 66 8b 12          	mov    (%edx),%edx
    82ab:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    82b2:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    82b4:	66 a1 d0 96          	mov    0x96d0,%eax
    82b8:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    82bd:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    82c2:	67 66 89 14 c5 84 96 	mov    %edx,0x9684(,%eax,8)
    82c9:	00 00 
            boot_info.ram_region_count++;
    82cb:	66 a1 d0 96          	mov    0x96d0,%eax
    82cf:	66 83 c0 01          	add    $0x1,%eax
    82d3:	66 a3 d0 96          	mov    %eax,0x96d0
        }

		if (contID == 0) {
    82d7:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    82dd:	74 15                	je     82f4 <detect_memory+0x119>
    82df:	eb 01                	jmp    82e2 <detect_memory+0x107>
			continue;
    82e1:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    82e2:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    82e8:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    82ee:	0f 8e 26 ff          	jle    8218 <detect_memory+0x3d>
    82f2:	eb 01                	jmp    82f5 <detect_memory+0x11a>
			break;
    82f4:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    82f5:	66 68 4c 86 00 00    	pushl  $0x864c
    82fb:	66 e8 9f fe ff ff    	calll  81a0 <show_msg>
    8301:	66 83 c4 04          	add    $0x4,%esp
}
    8305:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    830a:	66 5b                	pop    %ebx
    830c:	66 5e                	pop    %esi
    830e:	66 5f                	pop    %edi
    8310:	66 5d                	pop    %ebp
    8312:	66 c3                	retl   

00008314 <loader_entry>:

void loader_entry(void) {
    8314:	66 55                	push   %ebp
    8316:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading.....\r\n");
    8319:	66 68 52 86 00 00    	pushl  $0x8652
    831f:	66 e8 7b fe ff ff    	calll  81a0 <show_msg>
    8325:	66 83 c4 04          	add    $0x4,%esp
	detect_memory();
    8329:	66 e8 ac fe ff ff    	calll  81db <detect_memory>
	enter_protect_mode();
    832f:	66 e8 d9 fd ff ff    	calll  810e <enter_protect_mode>
    for(;;) {}
    8335:	eb fe                	jmp    8335 <loader_entry+0x21>

00008337 <inb>:
{
    8337:	55                   	push   %bp
    8338:	89 e5                	mov    %sp,%bp
    833a:	83 ec 14             	sub    $0x14,%sp
    833d:	8b 45 08             	mov    0x8(%di),%ax
    8340:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__ ("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    8344:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8348:	89 c2                	mov    %ax,%dx
    834a:	ec                   	in     (%dx),%al
    834b:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834e:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8352:	c9                   	leave  
    8353:	c3                   	ret    

00008354 <inw>:
{
    8354:	55                   	push   %bp
    8355:	89 e5                	mov    %sp,%bp
    8357:	83 ec 14             	sub    $0x14,%sp
    835a:	8b 45 08             	mov    0x8(%di),%ax
    835d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__ ("in %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    8361:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8365:	89 c2                	mov    %ax,%dx
    8367:	66 ed                	in     (%dx),%eax
    8369:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    836d:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    8371:	c9                   	leave  
    8372:	c3                   	ret    

00008373 <outb>:
{
    8373:	55                   	push   %bp
    8374:	89 e5                	mov    %sp,%bp
    8376:	83 ec 08             	sub    $0x8,%sp
    8379:	8b 55 08             	mov    0x8(%di),%dx
    837c:	8b 45 0c             	mov    0xc(%di),%ax
    837f:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8383:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__ ("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    8386:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838a:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838e:	ee                   	out    %al,(%dx)
}
    838f:	90                   	nop
    8390:	c9                   	leave  
    8391:	c3                   	ret    

00008392 <reload_elf_file>:
#include "loader.h"




static uint32_t reload_elf_file (uint8_t * file_buffer) {
    8392:	55                   	push   %bp
    8393:	89 e5                	mov    %sp,%bp
    8395:	83 ec 20             	sub    $0x20,%sp
    // 读取的只是ELF文件，不像BIN那样可直接运行，需要从中加载出有效数据和代码
    // 简单判断是否是合法的ELF文件
    Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    8398:	8b 45 08             	mov    0x8(%di),%ax
    839b:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != ELF_MAGIC) || (elf_hdr->e_ident[1] != 'E')
    839e:	8b 45 e8             	mov    -0x18(%di),%ax
    83a1:	0f b6 00             	movzbw (%bx,%si),%ax
    83a4:	3c 7f                	cmp    $0x7f,%al
    83a6:	75 21                	jne    83c9 <reload_elf_file+0x37>
    83a8:	8b 45 e8             	mov    -0x18(%di),%ax
    83ab:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    83af:	3c 45                	cmp    $0x45,%al
    83b1:	75 16                	jne    83c9 <reload_elf_file+0x37>
        || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')) {
    83b3:	8b 45 e8             	mov    -0x18(%di),%ax
    83b6:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    83ba:	3c 4c                	cmp    $0x4c,%al
    83bc:	75 0b                	jne    83c9 <reload_elf_file+0x37>
    83be:	8b 45 e8             	mov    -0x18(%di),%ax
    83c1:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    83c5:	3c 46                	cmp    $0x46,%al
    83c7:	74 0a                	je     83d3 <reload_elf_file+0x41>
        return 0;
    83c9:	b8 00 00             	mov    $0x0,%ax
    83cc:	00 00                	add    %al,(%bx,%si)
    83ce:	e9 d7 00             	jmp    84a8 <reload_elf_file+0x116>
    83d1:	00 00                	add    %al,(%bx,%si)
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    83d3:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    83d8:	00 00                	add    %al,(%bx,%si)
    83da:	e9 b2 00             	jmp    848f <reload_elf_file+0xfd>
    83dd:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr * phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    83df:	8b 45 e8             	mov    -0x18(%di),%ax
    83e2:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    83e5:	8b 45 08             	mov    0x8(%di),%ax
    83e8:	01 c2                	add    %ax,%dx
    83ea:	8b 45 fc             	mov    -0x4(%di),%ax
    83ed:	c1 e0 05             	shl    $0x5,%ax
    83f0:	01 d0                	add    %dx,%ax
    83f2:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD) {
    83f5:	8b 45 e4             	mov    -0x1c(%di),%ax
    83f8:	8b 00                	mov    (%bx,%si),%ax
    83fa:	83 f8 01             	cmp    $0x1,%ax
    83fd:	0f 85 89 00          	jne    848a <reload_elf_file+0xf8>
    8401:	00 00                	add    %al,(%bx,%si)
            continue;
        }

		// 全部使用物理地址，此时分页机制还未打开
        uint8_t * src = file_buffer + phdr->p_offset;
    8403:	8b 45 e4             	mov    -0x1c(%di),%ax
    8406:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8409:	8b 45 08             	mov    0x8(%di),%ax
    840c:	01 d0                	add    %dx,%ax
    840e:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t * dest = (uint8_t *)phdr->p_paddr;
    8411:	8b 45 e4             	mov    -0x1c(%di),%ax
    8414:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8417:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j++) {
    841a:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    841f:	00 00                	add    %al,(%bx,%si)
    8421:	eb 1b                	jmp    843e <reload_elf_file+0xac>
            *dest++ = *src++;
    8423:	8b 55 f8             	mov    -0x8(%di),%dx
    8426:	8d 42 01             	lea    0x1(%bp,%si),%ax
    8429:	89 45 f8             	mov    %ax,-0x8(%di)
    842c:	8b 45 f4             	mov    -0xc(%di),%ax
    842f:	8d 48 01             	lea    0x1(%bx,%si),%cx
    8432:	89 4d f4             	mov    %cx,-0xc(%di)
    8435:	0f b6 12             	movzbw (%bp,%si),%dx
    8438:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j++) {
    843a:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    843e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8441:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8444:	8b 45 f0             	mov    -0x10(%di),%ax
    8447:	39 c2                	cmp    %ax,%dx
    8449:	77 d8                	ja     8423 <reload_elf_file+0x91>
        }

		// memsz和filesz不同时，后续要填0
		dest= (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    844b:	8b 45 e4             	mov    -0x1c(%di),%ax
    844e:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8451:	8b 45 e4             	mov    -0x1c(%di),%ax
    8454:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8457:	01 d0                	add    %dx,%ax
    8459:	89 45 f4             	mov    %ax,-0xc(%di)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    845c:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    8461:	00 00                	add    %al,(%bx,%si)
    8463:	eb 10                	jmp    8475 <reload_elf_file+0xe3>
			*dest++ = 0;
    8465:	8b 45 f4             	mov    -0xc(%di),%ax
    8468:	8d 50 01             	lea    0x1(%bx,%si),%dx
    846b:	89 55 f4             	mov    %dx,-0xc(%di)
    846e:	c6 00 00             	movb   $0x0,(%bx,%si)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    8471:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    8475:	8b 45 e4             	mov    -0x1c(%di),%ax
    8478:	8b 50 14             	mov    0x14(%bx,%si),%dx
    847b:	8b 45 e4             	mov    -0x1c(%di),%ax
    847e:	8b 40 10             	mov    0x10(%bx,%si),%ax
    8481:	29 c2                	sub    %ax,%dx
    8483:	8b 45 ec             	mov    -0x14(%di),%ax
    8486:	39 c2                	cmp    %ax,%dx
    8488:	77 db                	ja     8465 <reload_elf_file+0xd3>
    848a:	eb 01                	jmp    848d <reload_elf_file+0xfb>
            continue;
    848c:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    848d:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    8491:	8b 45 e8             	mov    -0x18(%di),%ax
    8494:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    8498:	0f b7 c0             	movzww %ax,%ax
    849b:	39 45 fc             	cmp    %ax,-0x4(%di)
    849e:	0f 8c 3b ff          	jl     83dd <reload_elf_file+0x4b>
    84a2:	ff                   	(bad)  
    84a3:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
		}
    }

    return elf_hdr->e_entry;
    84a7:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    84aa:	c9                   	leave  
    84ab:	c3                   	ret    

000084ac <die>:
static void die (int code) {
    84ac:	55                   	push   %bp
    84ad:	89 e5                	mov    %sp,%bp
    for (;;) {
    84af:	eb fe                	jmp    84af <die+0x3>

000084b1 <read_disk>:
    }
}

static void read_disk(int sector,int sector_count,uint8_t *buf)
{
    84b1:	55                   	push   %bp
    84b2:	89 e5                	mov    %sp,%bp
    84b4:	53                   	push   %bx
    84b5:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    84b8:	68 e0 00             	push   $0xe0
    84bb:	00 00                	add    %al,(%bx,%si)
    84bd:	68 f6 01             	push   $0x1f6
    84c0:	00 00                	add    %al,(%bx,%si)
    84c2:	e8 ac fe             	call   8371 <inw+0x1d>
    84c5:	ff                   	(bad)  
    84c6:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    84ca:	8b 45 0c             	mov    0xc(%di),%ax
    84cd:	c1 f8 08             	sar    $0x8,%ax
    84d0:	0f b6 c0             	movzbw %al,%ax
    84d3:	50                   	push   %ax
    84d4:	68 f2 01             	push   $0x1f2
    84d7:	00 00                	add    %al,(%bx,%si)
    84d9:	e8 95 fe             	call   8371 <inw+0x1d>
    84dc:	ff                   	(bad)  
    84dd:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    84e1:	8b 45 08             	mov    0x8(%di),%ax
    84e4:	c1 f8 18             	sar    $0x18,%ax
    84e7:	0f b6 c0             	movzbw %al,%ax
    84ea:	50                   	push   %ax
    84eb:	68 f3 01             	push   $0x1f3
    84ee:	00 00                	add    %al,(%bx,%si)
    84f0:	e8 7e fe             	call   8371 <inw+0x1d>
    84f3:	ff                   	(bad)  
    84f4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    84f8:	6a 00                	push   $0x0
    84fa:	68 f4 01             	push   $0x1f4
    84fd:	00 00                	add    %al,(%bx,%si)
    84ff:	e8 6f fe             	call   8371 <inw+0x1d>
    8502:	ff                   	(bad)  
    8503:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    8507:	6a 00                	push   $0x0
    8509:	68 f5 01             	push   $0x1f5
    850c:	00 00                	add    %al,(%bx,%si)
    850e:	e8 60 fe             	call   8371 <inw+0x1d>
    8511:	ff                   	(bad)  
    8512:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    8516:	8b 45 0c             	mov    0xc(%di),%ax
    8519:	0f b6 c0             	movzbw %al,%ax
    851c:	50                   	push   %ax
    851d:	68 f2 01             	push   $0x1f2
    8520:	00 00                	add    %al,(%bx,%si)
    8522:	e8 4c fe             	call   8371 <inw+0x1d>
    8525:	ff                   	(bad)  
    8526:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    852a:	8b 45 08             	mov    0x8(%di),%ax
    852d:	0f b6 c0             	movzbw %al,%ax
    8530:	50                   	push   %ax
    8531:	68 f3 01             	push   $0x1f3
    8534:	00 00                	add    %al,(%bx,%si)
    8536:	e8 38 fe             	call   8371 <inw+0x1d>
    8539:	ff                   	(bad)  
    853a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    853e:	8b 45 08             	mov    0x8(%di),%ax
    8541:	c1 f8 08             	sar    $0x8,%ax
    8544:	0f b6 c0             	movzbw %al,%ax
    8547:	50                   	push   %ax
    8548:	68 f4 01             	push   $0x1f4
    854b:	00 00                	add    %al,(%bx,%si)
    854d:	e8 21 fe             	call   8371 <inw+0x1d>
    8550:	ff                   	(bad)  
    8551:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    8555:	8b 45 08             	mov    0x8(%di),%ax
    8558:	c1 f8 10             	sar    $0x10,%ax
    855b:	0f b6 c0             	movzbw %al,%ax
    855e:	50                   	push   %ax
    855f:	68 f5 01             	push   $0x1f5
    8562:	00 00                	add    %al,(%bx,%si)
    8564:	e8 0a fe             	call   8371 <inw+0x1d>
    8567:	ff                   	(bad)  
    8568:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);
    856c:	6a 24                	push   $0x24
    856e:	68 f7 01             	push   $0x1f7
    8571:	00 00                	add    %al,(%bx,%si)
    8573:	e8 fb fd             	call   8371 <inw+0x1d>
    8576:	ff                   	(bad)  
    8577:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    uint16_t *data_buf =(uint16_t*)buf;
    857b:	8b 45 10             	mov    0x10(%di),%ax
    857e:	89 45 f8             	mov    %ax,-0x8(%di)
    while (sector_count-- > 0) {
    8581:	eb 4a                	jmp    85cd <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    8583:	90                   	nop
    8584:	68 f7 01             	push   $0x1f7
    8587:	00 00                	add    %al,(%bx,%si)
    8589:	e8 a9 fd             	call   8335 <loader_entry+0x21>
    858c:	ff                   	(bad)  
    858d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8591:	0f b6 c0             	movzbw %al,%ax
    8594:	25 88 00             	and    $0x88,%ax
    8597:	00 00                	add    %al,(%bx,%si)
    8599:	83 f8 08             	cmp    $0x8,%ax
    859c:	75 e6                	jne    8584 <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    859e:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    85a3:	00 00                	add    %al,(%bx,%si)
    85a5:	eb 1d                	jmp    85c4 <read_disk+0x113>
			*data_buf++ = inw(0x1F0);
    85a7:	8b 5d f8             	mov    -0x8(%di),%bx
    85aa:	8d 43 02             	lea    0x2(%bp,%di),%ax
    85ad:	89 45 f8             	mov    %ax,-0x8(%di)
    85b0:	68 f0 01             	push   $0x1f0
    85b3:	00 00                	add    %al,(%bx,%si)
    85b5:	e8 9a fd             	call   8352 <inb+0x1b>
    85b8:	ff                   	(bad)  
    85b9:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    85bd:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    85c0:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    85c4:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    85c9:	00 00                	add    %al,(%bx,%si)
    85cb:	7e da                	jle    85a7 <read_disk+0xf6>
    while (sector_count-- > 0) {
    85cd:	8b 45 0c             	mov    0xc(%di),%ax
    85d0:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    85d3:	89 55 0c             	mov    %dx,0xc(%di)
    85d6:	85 c0                	test   %ax,%ax
    85d8:	7f a9                	jg     8583 <read_disk+0xd2>
		}
	}
    
}
    85da:	90                   	nop
    85db:	8b 5d fc             	mov    -0x4(%di),%bx
    85de:	c9                   	leave  
    85df:	c3                   	ret    

000085e0 <load_kernel>:
void load_kernel(void) {
    85e0:	55                   	push   %bp
    85e1:	89 e5                	mov    %sp,%bp
    85e3:	83 ec 18             	sub    $0x18,%sp
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85e6:	68 00 00             	push   $0x0
    85e9:	10 00                	adc    %al,(%bx,%si)
    85eb:	68 f4 01             	push   $0x1f4
    85ee:	00 00                	add    %al,(%bx,%si)
    85f0:	6a 64                	push   $0x64
    85f2:	e8 ba fe             	call   84af <die+0x3>
    85f5:	ff                   	(bad)  
    85f6:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    
    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85fa:	68 00 00             	push   $0x0
    85fd:	10 00                	adc    %al,(%bx,%si)
    85ff:	e8 8e fd             	call   8390 <outb+0x1d>
    8602:	ff                   	(bad)  
    8603:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8607:	89 45 f4             	mov    %ax,-0xc(%di)
	if (kernel_entry == 0) {
    860a:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    860e:	75 0a                	jne    861a <load_kernel+0x3a>
		die(-1);
    8610:	6a ff                	push   $0xffff
    8612:	e8 95 fe             	call   84aa <reload_elf_file+0x118>
    8615:	ff                   	(bad)  
    8616:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
	}
    ((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    861a:	8b 45 f4             	mov    -0xc(%di),%ax
    861d:	83 ec 0c             	sub    $0xc,%sp
    8620:	68 80 96             	push   $0x9680
    8623:	00 00                	add    %al,(%bx,%si)
    8625:	ff d0                	call   *%ax
    8627:	83 c4 10             	add    $0x10,%sp
    for (;;) {}
    862a:	eb fe                	jmp    862a <load_kernel+0x4a>
